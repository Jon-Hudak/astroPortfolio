---
import { Icon } from "astro-icon";

const { navbarChange } = Astro.props;
---

<header class="fixed w-screen top-0 z-50">
  <nav
    class="px-5 py-3 sm:h-32 bg-offBlack text-white flex justify-between items-center z-50"
  >
    <a href="/" aria-label="Homepage">
      <div class="logoWrapper h-24">
        <Icon
          optimize={false}
          alt="Logo"
          name="logo-no-background"
          class="h-full w-full transition duration-100 hover:grayscale hover:contrast-0"
        />
      </div>
    </a>
    <button
    role="navigation"
      aria-controls="primary-navigation"
      aria-expanded="false"
      id="hamburgerButton"
      class="block md:hidden z-50"
      ><span class="sr-only">Menu</span>
      <svg
        id="hamburgerSvg"
        class="pointer-events-none"
        width="64"
        height="64"
        viewBox="0 0 100 100"
      >
        <path
          class="line line1 stroke-white"
          d="M 20,29.000046 H 80.000231 C 80.000231,29.000046 94.498839,28.817352 94.532987,66.711331 94.543142,77.980673 90.966081,81.670246 85.259173,81.668997 79.552261,81.667751 75.000211,74.999942 75.000211,74.999942 L 25.000021,25.000058"
        ></path>
        <path class="line line2 stroke-white" d="M 20,50 H 80"></path>
        <path
          class="line line3 stroke-white"
          d="M 20,70.999954 H 80.000231 C 80.000231,70.999954 94.498839,71.182648 94.532987,33.288669 94.543142,22.019327 90.966081,18.329754 85.259173,18.331003 79.552261,18.332249 75.000211,25.000058 75.000211,25.000058 L 25.000021,74.999942"
        ></path>
      </svg>
    </button>
    <ul
      id="primary-navigation"
      class="md:px-5 translate-x-full md:translate-x-0 flex bg-offBlack/70 fixed top-0 bottom-0 left-1/3 right-0 md:flex flex-col md:relative md:inset-0 md:flex-row gap-12 pt-36 md:pt-0 place-items-center transition border border-neutral-500 md:border-0 rounded-l-3xl opacity-0 md:opacity-100"
    >
      <li
      
        class="navLi delay-50"
        
      >
        <a href="/">Home</a>
      </li>
      <li
      
        class="navLi delay-100"
      >
        <a href="/#about"> About</a>
      </li>
      <li
      
        class="navLi delay-150"
      >
        <a href="/#projects"> Projects</a>
      </li>
      <li
      
        class="navLi delay-200"
      >
        <a href="/#contactSection"> Contact</a>
      </li>
    </ul>
    
  </nav>

  <!-- {hamburgerOpen && (
        <HamburgerMenu
          hamburgerOpen={hamburgerOpen}
          setHamburgerOpen={setHamburgerOpen}
        />
      )} -->
</header>

<style>
  #primary-navigation {
    backdrop-filter: blur(1.5rem);
  }
  .navLi {
     @apply p-2 text-4xl md:text-2xl duration-500 translate-x-full md:translate-x-0 w-full hover:text-accent-blue text-center transition cursor-pointer hover:bg-black/30 invisible md:visible;
 
  }
  .navOpen, .navOpen>.navLi{
    @apply translate-x-0 opacity-100 visible;
  }
  /* .navOpen>.navLi{
    @apply translate-x-0;
  } */

</style>

<script>
  let hamburgerOpen = false;
  const hamburgerButton = document.getElementById("hamburgerButton");
  const navUl = document.querySelector("#primary-navigation");
  const navItems = document.querySelectorAll(".navLi>a");
  const hamburgerSvg = document.getElementById("hamburgerSvg");
  const body=document.querySelector("body");

  //hamburgerButton.addEventListener("click", handleClick);
  document.addEventListener("keydown", handleKeydown);
  document.addEventListener("click", handleClick)

  function handleKeydown(e) {
    if (e.key === "Escape") {
      handleClick(e, true);
    }
  }

  function handleClick(e, close = false) {
    if(e.target.id!=="hamburgerButton"){
      close=true;
      console.log("hi",close);
    }
    //if escape is pressed, force close the menu
    
      //toggle aria-expanded attribute
      if(close || hamburgerButton.ariaExpanded=="true"){
        
        hamburgerButton.ariaExpanded="false";
        navUl.classList.remove("navOpen");
        hamburgerSvg.classList.remove("opened");
        body.classList.remove("overflow-y-hidden")
        navItems.forEach((li, i) => {
      
      li.setAttribute("tabindex", "-1")
      li.setAttribute("visibility","hidden")
    });
  }
        
      
      else {
        
        hamburgerButton.ariaExpanded="true";
        navUl.classList.add("navOpen");
        hamburgerSvg.classList.add("opened");
        body.classList.add("overflow-y-hidden")
        navItems.forEach((li, i) => {
      
      li.setAttribute("tabindex", "0")
      li.setAttribute("visibility","visible")
    });
  }
      }
    

// console.log(navLis);
//     navLis.forEach((li, i) => {
//       //li.classList.add (`delay-${i*50}`)
//       li.setAttribute("tabindex", -1)
//     });
//   }
</script>
